% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fastlss_shared.R
\name{lss_mode_a}
\alias{lss_mode_a}
\alias{fastlss_shared}
\title{Fast LSS Mode A (shared trial regressors)}
\usage{
lss_mode_a(
  Y,
  A,
  C,
  p_vec,
  lambda_ridge = 0,
  woodbury_thresh = 50,
  chunk_size = NULL,
  progress = FALSE,
  mem_limit = NULL,
  W = NULL,
  use_cpp = FALSE
)

fastlss_shared(
  Y,
  A,
  C,
  p_vec,
  lambda_ridge = 0,
  woodbury_thresh = 50,
  chunk_size = NULL,
  progress = FALSE,
  mem_limit = NULL,
  W = NULL,
  use_cpp = FALSE
)
}
\arguments{
\item{Y}{Numeric matrix of BOLD data (n x v).}

\item{A}{Numeric matrix of nuisance regressors (n x m).}

\item{C}{Numeric matrix of trial regressors shared across voxels
(n x T).}

\item{p_vec}{Numeric vector of length n as described in the proposal.}

\item{lambda_ridge}{Optional ridge penalty when computing the
pseudoinverse of \code{A}.}

\item{woodbury_thresh}{Threshold for switching from Woodbury to
QR-based residualisation. See \code{auto_residualize}.}

\item{chunk_size}{Optional chunk size (number of trials) used to
process \code{C} in blocks. Set automatically when
\code{mem_limit} is supplied.}

\item{progress}{Logical; display a progress bar when processing in
chunks.}

\item{mem_limit}{Optional memory limit in megabytes for automatic
chunking.}

\item{W}{Optional whitening matrix to apply to `Y`, `A` and `C`
before running the kernel.}

\item{use_cpp}{Logical; use the enhanced C++ implementation when TRUE.}
}
\value{
A numeric matrix of trial coefficients (T x v).
}
\description{
Implements the shared-regressor variant of the fast least-squares
separate (LSS) algorithm described in `raw-data/FastLSS_proposal.md`.
All heavy computations are carried out using BLAS-optimised matrix
operations.
}
