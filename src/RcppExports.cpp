// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lss_kernel_cpp
arma::mat lss_kernel_cpp(const arma::mat& C, const arma::mat& A, const arma::mat& Y, const arma::vec& p_vec, double lambda_ridge, bool shared_C, double eig_tol, double denom_tol, arma::uword block_size);
RcppExport SEXP _hrfals_lss_kernel_cpp(SEXP CSEXP, SEXP ASEXP, SEXP YSEXP, SEXP p_vecSEXP, SEXP lambda_ridgeSEXP, SEXP shared_CSEXP, SEXP eig_tolSEXP, SEXP denom_tolSEXP, SEXP block_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_ridge(lambda_ridgeSEXP);
    Rcpp::traits::input_parameter< bool >::type shared_C(shared_CSEXP);
    Rcpp::traits::input_parameter< double >::type eig_tol(eig_tolSEXP);
    Rcpp::traits::input_parameter< double >::type denom_tol(denom_tolSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type block_size(block_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(lss_kernel_cpp(C, A, Y, p_vec, lambda_ridge, shared_C, eig_tol, denom_tol, block_size));
    return rcpp_result_gen;
END_RCPP
}
// lss_check_conditioning
Rcpp::List lss_check_conditioning(const arma::mat& A, double lambda_ridge);
RcppExport SEXP _hrfals_lss_check_conditioning(SEXP ASEXP, SEXP lambda_ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type lambda_ridge(lambda_ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(lss_check_conditioning(A, lambda_ridge));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hrfals_lss_kernel_cpp", (DL_FUNC) &_hrfals_lss_kernel_cpp, 9},
    {"_hrfals_lss_check_conditioning", (DL_FUNC) &_hrfals_lss_check_conditioning, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_hrfals(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
